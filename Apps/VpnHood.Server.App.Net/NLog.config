<?xml version="1.0" encoding="utf-8"?>

<!-- XSD manual extracted from package NLog.Schema: https://www.nuget.org/packages/NLog.Schema-->
<nlog xmlns="http://www.nlog-project.org/schemas/NLog.xsd"
      xsi:schemaLocation="http://www.nlog-project.org/schemas/NLog.xsd NLog.xsd"
      xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
      autoReload="true"
      internalLogFile="logs/internal.log"
      internalLogLevel="Info">

	<!-- the targets to write to -->
	<targets>

		<!-- log -->
		<target xsi:type="File" name="logfile" archiveOldFileOnStartup="true"
				layout="${longdate} | ${level} | ${event-properties:EventName} | ${ndlc:separator= => } ${newline} ${message} ${exception:format=type,message} ${newline}"
				fileName="${currentdir}/logs/server.log"
				archiveFileName="${currentdir}/logs/log-archive/server.{#}.log"
				archiveNumbering="DateAndSequence"
				archiveAboveSize="10000000"
				keepFileOpen="true"
				maxArchiveDays="30"
				maxArchiveFiles="100"/>

		<!--Console-->
		<target xsi:type="ColoredConsole" name="logconsole" useDefaultRowHighlightingRules="false"
				layout="${date} | ${level} | ${event-properties:EventName} | ${ndlc:separator= => } ${newline} ${message} ${exception:format=type,message} ${newline}">
			<highlight-row condition="level == LogLevel.Error" foregroundColor="Red" />
			<highlight-row condition="level == LogLevel.Warn" foregroundColor="Yellow" />
		</target>

		<!-- tracking -->
		<target xsi:type="File" name="trackfile" archiveOldFileOnStartup="true"
				fileName="${currentdir}/logs/track.log"
				archiveFileName="${currentdir}/logs/track-archive/track.{#}.log"
				archiveNumbering="Date"
				archiveEvery="Hour"
				archiveDateFormat="yyyy-MM-dd#HH"
				keepFileOpen="true"
				maxArchiveDays="31"
				layout="${longdate}&#x9;${message}" />

		<!-- tracking -->
		<target xsi:type="File" name="sessionfile" archiveOldFileOnStartup="true"
				fileName="${currentdir}/logs/sessions.log"
				archiveFileName="${currentdir}/logs/sessions-archive/sessions.{#}.log"
				archiveNumbering="Date"
				archiveEvery="Day"
				archiveDateFormat="yyyy-MM-dd"
				keepFileOpen="true"
				maxArchiveDays="31"
				layout="${longdate}&#x9;${message}" />

	</targets>

	<!-- rules to map from logger name to target -->
	<rules>
		<logger name="*" minlevel="Info" writeTo="logfile,logconsole">
			<filters defaultAction="Log">
				<when condition="'${event-properties:EventName}'=='Essential'" action="Log" />
				<when condition="'${event-properties:EventName}'=='Session'" action="Log" />
				<when condition="'${event-properties:EventName}'=='SessionTrack'" action="Log" />
				<when condition="'${event-properties:EventName}'=='NetProtect'" action="Log" />
				<when condition="'${event-properties:EventName}'=='NetFilter'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='Tls'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='Tcp'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='Ping'" action="Ignore" /> <!--Requires IsDiagnoseMode-->
				<when condition="'${event-properties:EventName}'=='Nat'" action="Ignore" /> <!--Requires IsDiagnoseMode-->
				<when condition="'${event-properties:EventName}'=='Udp'" action="Ignore" /> <!--Requires IsDiagnoseMode-->
				<when condition="'${event-properties:EventName}'=='UdpSign'" action="Log" /> <!--Requires IsDiagnoseMode-->
				<when condition="'${event-properties:EventName}'=='Packet'" action="Ignore" /> 
				<when condition="'${event-properties:EventName}'=='DatagramChannel'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='StreamProxyChannel'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='AccessManager'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='Request'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='TcpLife'" action="Ignore" />
				<when condition="'${event-properties:EventName}'=='Track'" action="Ignore" /> <!--Keep it Ignore. see target:trackfile -->
			</filters>
		</logger>

		<!--Track File-->
		<logger name="*" minlevel="Info" writeTo="trackfile">
			<filters defaultAction="Ignore">
				<when condition="'${event-properties:EventName}'=='Track'" action="Log" />
			</filters>
		</logger>

		<!--Session File-->
		<logger name="*" minlevel="Info" writeTo="sessionfile">
			<filters defaultAction="Ignore">
				<when condition="'${event-properties:EventName}'=='SessionTrack'" action="Log" />
			</filters>
		</logger>

	</rules>
</nlog>